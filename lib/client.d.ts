import type { Twilio, TwilioData, TwilioQuery, TwilioService } from './services/twilio/twilio';
export type { Twilio, TwilioData, TwilioQuery };
export type { Twilio, TwilioData, TwilioQuery };
export type { Twilio, TwilioData, TwilioQuery };
import type { Drivers, DriversData, DriversQuery, DriversService } from './services/driver/driver';
export type { Drivers, DriversData, DriversQuery };
import type { Transactions, TransactionsData, TransactionsQuery, TransactionsService } from './services/transaction/transaction';
export type { Transactions, TransactionsData, TransactionsQuery };
import type { Wallets, WalletsData, WalletsQuery, WalletsService } from './services/wallet/wallet';
export type { Wallets, WalletsData, WalletsQuery };
import type { Shops, ShopsData, ShopsQuery, ShopsService } from './services/shop/shop';
export type { Shops, ShopsData, ShopsQuery };
import type { Products, ProductsData, ProductsQuery, ProductsService } from './services/product/product';
export type { Products, ProductsData, ProductsQuery };
import type { Poptions, PoptionsData, PoptionsQuery, PoptionsService } from './services/modifier_option/modifier_option';
export type { Poptions, PoptionsData, PoptionsQuery };
import type { Pmodifiers, PmodifiersData, PmodifiersQuery, PmodifiersService } from './services/modifier/modifier';
export type { Pmodifiers, PmodifiersData, PmodifiersQuery };
import type { Pcategories, PcategoriesData, PcategoriesQuery, PcategoriesService } from './services/product_category/product_category';
export type { Pcategories, PcategoriesData, PcategoriesQuery };
import type { Orders, OrdersData, OrdersQuery, OrdersService } from './services/order/order';
export type { Orders, OrdersData, OrdersQuery };
import type { Lineitems, LineitemsData, LineitemsQuery, LineitemsService } from './services/lineitem/lineitem';
export type { Lineitems, LineitemsData, LineitemsQuery };
import type { Business, BusinessData, BusinessQuery, BusinessService } from './services/business/business';
export type { Business, BusinessData, BusinessQuery };
import type { Broles, BrolesData, BrolesQuery, BrolesService } from './services/employee_role/employee_role';
export type { Broles, BrolesData, BrolesQuery };
import type { AuthenticationService } from '@feathersjs/authentication';
import type { User, UserData, UserQuery, UserService } from './services/user/user';
export type { User, UserData, UserQuery };
import type { TransportConnection, Params } from '@feathersjs/feathers';
declare const userServiceMethods: readonly ["find", "get", "create", "update", "patch", "remove"];
declare type UserClientService = Pick<UserService<Params<UserQuery>>, typeof userServiceMethods[number]>;
declare const brolesServiceMethods: readonly ["find", "get", "create", "update", "patch", "remove"];
declare type BrolesClientService = Pick<BrolesService<Params<BrolesQuery>>, typeof brolesServiceMethods[number]>;
declare const businessServiceMethods: readonly ["find", "get", "create", "update", "patch", "remove"];
declare type BusinessClientService = Pick<BusinessService<Params<BusinessQuery>>, typeof businessServiceMethods[number]>;
declare const lineitemsServiceMethods: readonly ["find", "get", "create", "update", "patch", "remove"];
declare type LineitemsClientService = Pick<LineitemsService<Params<LineitemsQuery>>, typeof lineitemsServiceMethods[number]>;
declare const ordersServiceMethods: readonly ["find", "get", "create", "update", "patch", "remove"];
declare type OrdersClientService = Pick<OrdersService<Params<OrdersQuery>>, typeof ordersServiceMethods[number]>;
declare const pcategoriesServiceMethods: readonly ["find", "get", "create", "update", "patch", "remove"];
declare type PcategoriesClientService = Pick<PcategoriesService<Params<PcategoriesQuery>>, typeof pcategoriesServiceMethods[number]>;
declare const pmodifiersServiceMethods: readonly ["find", "get", "create", "update", "patch", "remove"];
declare type PmodifiersClientService = Pick<PmodifiersService<Params<PmodifiersQuery>>, typeof pmodifiersServiceMethods[number]>;
declare const poptionsServiceMethods: readonly ["find", "get", "create", "update", "patch", "remove"];
declare type PoptionsClientService = Pick<PoptionsService<Params<PoptionsQuery>>, typeof poptionsServiceMethods[number]>;
declare const productsServiceMethods: readonly ["find", "get", "create", "update", "patch", "remove"];
declare type ProductsClientService = Pick<ProductsService<Params<ProductsQuery>>, typeof productsServiceMethods[number]>;
declare const shopsServiceMethods: readonly ["find", "get", "create", "update", "patch", "remove"];
declare type ShopsClientService = Pick<ShopsService<Params<ShopsQuery>>, typeof shopsServiceMethods[number]>;
declare const walletsServiceMethods: readonly ["find", "get", "create", "update", "patch", "remove"];
declare type WalletsClientService = Pick<WalletsService<Params<WalletsQuery>>, typeof walletsServiceMethods[number]>;
declare const transactionsServiceMethods: readonly ["find", "get", "create", "update", "patch", "remove"];
declare type TransactionsClientService = Pick<TransactionsService<Params<TransactionsQuery>>, typeof transactionsServiceMethods[number]>;
declare const driversServiceMethods: readonly ["find", "get", "create", "update", "patch", "remove"];
declare type DriversClientService = Pick<DriversService<Params<DriversQuery>>, typeof driversServiceMethods[number]>;
declare const twilioServiceMethods: readonly ["find", "get", "create", "update", "patch", "remove"];
declare type TwilioClientService = Pick<TwilioService, typeof twilioServiceMethods[number]>;
export interface ServiceTypes {
    twilio: TwilioClientService;
    twilio: TwilioClientService;
    twilio: TwilioClientService;
    drivers: DriversClientService;
    transactions: TransactionsClientService;
    wallets: WalletsClientService;
    shops: ShopsClientService;
    products: ProductsClientService;
    poptions: PoptionsClientService;
    pmodifiers: PmodifiersClientService;
    pcategories: PcategoriesClientService;
    orders: OrdersClientService;
    lineitems: LineitemsClientService;
    business: BusinessClientService;
    broles: BrolesClientService;
    authentication: Pick<AuthenticationService, 'create' | 'remove'>;
    users: UserClientService;
}
export declare const createClient: <Configuration = any>(connection: TransportConnection<ServiceTypes>) => import("@feathersjs/feathers").Application<ServiceTypes, Configuration>;
