"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generate = exports.template = void 0;
const pinion_1 = require("@feathershq/pinion");
const commons_1 = require("../../commons");
const template = ({ camelName, authentication, isEntityService, path, className, relative, schema, fileName }) => /* ts */ `
${authentication || isEntityService ? `import { authenticate } from '@feathersjs/authentication'` : ''}
${schema
    ? `
import { hooks as schemaHooks } from '@feathersjs/schema'
    
import {
  ${camelName}DataValidator,
  ${camelName}QueryValidator,
  ${camelName}Resolver,
  ${camelName}DataResolver,
  ${camelName}QueryResolver,
  ${camelName}ExternalResolver
} from './${fileName}.schema'
`
    : ''}

import type { Application } from '${relative}/declarations'
import { ${className}, getOptions } from './${fileName}.class'

export * from './${fileName}.class'
${schema ? `export * from './${fileName}.schema'` : ''}

// A configure function that registers the service and its hooks via \`app.configure\`
export const ${camelName} = (app: Application) => {
  // Register our service on the Feathers application
  app.use('${path}', new ${className}(getOptions(app)), {
    // A list of all methods this service exposes externally
    methods: ['find', 'get', 'create', 'update', 'patch', 'remove'],
    // You can add additional custom events to be sent to clients here
    events: []
  })
  // Initialize hooks
  app.service('${path}').hooks({
    around: {
      all: [${authentication
    ? `
        authenticate('jwt'),`
    : ''}
      ]${isEntityService
    ? `,
      find: [ authenticate('jwt') ],
      get: [ authenticate('jwt') ],
      create: [],
      update: [ authenticate('jwt') ],
      patch: [ authenticate('jwt') ],
      remove: [ authenticate('jwt') ]`
    : ''}
    },
    before: {
      all: [${schema
    ? `
        schemaHooks.validateQuery(${camelName}QueryValidator),
        schemaHooks.validateData(${camelName}DataValidator),
        schemaHooks.resolveQuery(${camelName}QueryResolver),
        schemaHooks.resolveData(${camelName}DataResolver)
      `
    : ''}]
    },
    after: {
      all: [${schema
    ? `
        schemaHooks.resolveResult(${camelName}Resolver),
        schemaHooks.resolveExternal(${camelName}ExternalResolver)
      `
    : ''}]
    },
    error: {
      all: []
    }
  })
}

// Add this service to the service type index
declare module '${relative}/declarations' {
  interface ServiceTypes {
    '${path}': ${className}
  }
}
`;
exports.template = template;
const toServiceIndex = (0, pinion_1.toFile)(({ lib }) => [lib, 'services', `index`]);
const generate = (ctx) => (0, pinion_1.generator)(ctx)
    .then((0, commons_1.renderSource)(exports.template, (0, pinion_1.toFile)(({ lib, fileName, folder }) => [
    lib,
    'services',
    ...folder,
    `${fileName}`
])))
    .then((0, commons_1.injectSource)(({ camelName, folder, fileName }) => `import { ${camelName} } from './${folder.join('/')}/${fileName}'`, (0, pinion_1.prepend)(), toServiceIndex))
    .then((0, commons_1.injectSource)(({ camelName }) => `  app.configure(${camelName})`, (0, pinion_1.after)('export const services'), toServiceIndex));
exports.generate = generate;
//# sourceMappingURL=service.tpl.js.map