"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.querySyntax = exports.queryProperties = exports.queryProperty = exports.sortDefinition = exports.getDataValidator = exports.getValidator = void 0;
const typebox_1 = require("@sinclair/typebox");
const schema_1 = require("@feathersjs/schema");
__exportStar(require("@sinclair/typebox"), exports);
__exportStar(require("./default-schemas"), exports);
/**
 * Returns a compiled validation function for a TypeBox object and AJV validator instance.
 *
 * @param schema The JSON schema definition
 * @param validator The AJV validation instance
 * @returns A compiled validation function
 */
const getValidator = (schema, validator) => schema_1.jsonSchema.getValidator(schema, validator);
exports.getValidator = getValidator;
/**
 * Returns compiled validation functions to validate data for the `create`, `update` and `patch`
 * service methods. If not passed explicitly, the `update` validator will be the same as the `create`
 * and `patch` will be the `create` validator with no required fields.
 *
 * @param def Either general TypeBox object definition or a mapping of `create`, `update` and `patch`
 * to their respective type object
 * @param validator The Ajv instance to use as the validator
 * @returns A map of validator functions
 */
const getDataValidator = (def, validator) => schema_1.jsonSchema.getDataValidator(def, validator);
exports.getDataValidator = getDataValidator;
const arrayOfKeys = (type) => {
    const keys = Object.keys(type.properties);
    return typebox_1.Type.Unsafe({ type: 'array', items: { type: 'string', enum: keys } });
};
function sortDefinition(schema) {
    const properties = Object.keys(schema.properties).reduce((res, key) => {
        const result = res;
        result[key] = typebox_1.Type.Optional(typebox_1.Type.Integer({ minimum: -1, maximum: 1 }));
        return result;
    }, {});
    return {
        type: 'object',
        additionalProperties: false,
        properties
    };
}
exports.sortDefinition = sortDefinition;
const queryProperty = (def) => {
    return typebox_1.Type.Optional(typebox_1.Type.Union([
        def,
        typebox_1.Type.Object({
            $gt: typebox_1.Type.Optional(def),
            $gte: typebox_1.Type.Optional(def),
            $lt: typebox_1.Type.Optional(def),
            $lte: typebox_1.Type.Optional(def),
            $ne: typebox_1.Type.Optional(def),
            $in: typebox_1.Type.Optional(typebox_1.Type.Array(def)),
            $nin: typebox_1.Type.Optional(typebox_1.Type.Array(def))
        })
    ]));
};
exports.queryProperty = queryProperty;
const queryProperties = (type) => {
    const properties = Object.keys(type.properties).reduce((res, key) => {
        const result = res;
        result[key] = (0, exports.queryProperty)(type.properties[key]);
        return result;
    }, {});
    return {
        type: 'object',
        additionalProperties: false,
        properties
    };
};
exports.queryProperties = queryProperties;
/**
 * Creates a TypeBox schema for the complete Feathers query syntax including `$limit`, $skip`
 * and `$sort` and `$select` for the allowed properties.
 *
 * @param type The properties to create the query syntax for
 * @returns A TypeBox object representing the complete Feathers query syntax for the given properties
 */
const querySyntax = (type) => {
    return typebox_1.Type.Intersect([
        typebox_1.Type.Object({
            $limit: typebox_1.Type.Optional(typebox_1.Type.Number({ minimum: 0 })),
            $skip: typebox_1.Type.Optional(typebox_1.Type.Number({ minimum: 0 })),
            $sort: typebox_1.Type.Optional(sortDefinition(type)),
            $select: typebox_1.Type.Optional(arrayOfKeys(type))
        }, { additionalProperties: false }),
        (0, exports.queryProperties)(type)
    ]);
};
exports.querySyntax = querySyntax;
//# sourceMappingURL=index.js.map